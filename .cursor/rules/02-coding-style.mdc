# Coding Style Guidelines

## TypeScript Best Practices
- Use TypeScript for all new code
- Define explicit types instead of using `any`
- Utilize interface over type when possible
- Enable strict mode in TypeScript configuration

## React Component Guidelines
- Use functional components with hooks
- Keep components focused and small (under 200 lines)
- Extract reusable logic into custom hooks
- Implement proper prop types using TypeScript interfaces
- Use React.memo() sparingly and only when necessary

## State Management
- Use React Router's built-in state management where possible
- Prefer local state over global state
- Implement context only when state needs to be shared across multiple components
- Keep state updates pure and predictable

## Performance Considerations
- Implement proper memoization strategies
- Avoid unnecessary re-renders
- Lazy load routes and heavy components
- Use proper key props in lists

## Error Handling
- Implement error boundaries for route-level error handling
- Use try-catch blocks for async operations
- Provide meaningful error messages to users
- Log errors appropriately for debugging

## Code Organization
- Group related functions and hooks together
- Keep files focused on a single responsibility
- Use meaningful variable and function names
- Add JSDoc comments for complex functions
