---
description:
globs:
alwaysApply: false
---
# API Structure Guide

## API Endpoints Architecture
The API is built using Netlify Functions with the following structure:

### Backend Functions
- [netlify/functions/api.ts](mdc:netlify/functions/api.ts) - Main API endpoints
- [netlify/functions/user-api.ts](mdc:netlify/functions/user-api.ts) - User-specific operations
- [netlify/functions/auth.ts](mdc:netlify/functions/auth.ts) - Authentication

### Frontend API Service
- [src/services/api.ts](mdc:src/services/api.ts) - Client-side API functions

## Adding New API Endpoints

### Backend (Netlify Functions)
In [netlify/functions/api.ts](mdc:netlify/functions/api.ts), add new cases to the switch statement:

```typescript
case 'new-endpoint':
  const result = await prisma.model.findMany({
    // query logic
  });
  return {
    statusCode: 200,
    headers,
    body: JSON.stringify(result)
  };
```

### Frontend Service
In [src/services/api.ts](mdc:src/services/api.ts), add corresponding functions:

```typescript
export async function fetchNewData(): Promise<DataType[]> {
  try {
    const response = await fetch(`${API_BASE_URL}/new-endpoint`)
    if (!response.ok) {
      throw new Error('Failed to fetch data')
    }
    return await response.json()
  } catch (error) {
    console.error('Error fetching data:', error)
    throw error
  }
}
```

## API Patterns
- Always include CORS headers
- Use proper HTTP status codes
- Include error handling with meaningful messages
- Log requests for debugging: `console.log('Request path:', event.path)`
- Disconnect Prisma at the end: `await prisma.$disconnect()`

## Book-specific Endpoints
- `/books` - List all books with pagination
- `/books/amazon` - Amazon affiliate books only
- `/books/trending` - Trending books
- `/books/search` - Search with filters
- `/books/{id}` - Individual book details
