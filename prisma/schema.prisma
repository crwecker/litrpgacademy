generator client {
  provider      = "prisma-client-js"
  output        = "../node_modules/.prisma/client"
  binaryTargets = ["native", "rhel-openssl-1.0.x"]
}

generator functions_client {
  provider      = "prisma-client-js"
  output        = "../netlify/functions/generated/prisma"
  binaryTargets = ["native", "rhel-openssl-1.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Book {
  id              String      @id
  title           String
  authorName      String
  description     String
  tags            String[]
  coverUrl        String?
  sourceUrl       String
  source          Source
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  contentWarnings String[]
  stats           BookStats[]
  bookTiers       BookTier[]
  bookReviews     BookReview[]
}

model BookStats {
  id              String   @id @default(cuid())
  bookId          String
  rating          Float    @default(0)
  followers       Int      @default(0)
  views           Int      @default(0)
  pages           Int      @default(0)
  createdAt       DateTime @default(now())
  average_views   Int      @default(0)
  favorites       Int      @default(0)
  ratings_count   Int      @default(0)
  character_score Float    @default(0)
  grammar_score   Float    @default(0)
  overall_score   Float    @default(0)
  story_score     Float    @default(0)
  style_score     Float    @default(0)
  book            Book     @relation(fields: [bookId], references: [id])

  @@unique([bookId, createdAt])
}

enum Source {
  ROYAL_ROAD
  AMAZON
}

model User {
  id            String      @id @default(cuid())
  email         String      @unique
  firstName     String
  lastName      String
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  magicLinks    MagicLink[]
  bookTiers     BookTier[]
  bookReviews   BookReview[]
}

model MagicLink {
  id          String    @id @default(cuid())
  token       String    @unique
  userId      String
  user        User      @relation(fields: [userId], references: [id])
  expiresAt   DateTime
  createdAt   DateTime  @default(now())
  usedAt      DateTime?

  @@index([token])
}

model BookTier {
  id        String   @id @default(cuid())
  userId    String
  bookId    String
  tier      TierLevel
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  book      Book     @relation(fields: [bookId], references: [id])

  @@unique([userId, bookId])
}

model BookReview {
  id        String   @id @default(cuid())
  userId    String
  bookId    String
  review    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  book      Book     @relation(fields: [bookId], references: [id])

  @@unique([userId, bookId])
}

enum TierLevel {
  SSS
  SS
  S
  A
  B
  C
  READ
  D
  E
  F
}
